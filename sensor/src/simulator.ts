export interface Reading {
  deviceNumber: string;
  airHumidity: number | null;
  soilMoisture: number | null;
  airTemperature: number | null;
  lightLuminosity: number | null;
  chlorophyllContent: number | null;
}

/**
 * Class which represents replacing simulator for real data collecting sensor
 */
class Simulator {
  private readonly _NULL_PROBABILITY = 0.1;

  private readonly _AIR_HUMIDITY_MIN = 0;
  private readonly _AIR_HUMIDITY_MAX = 100;
  private readonly _SOIL_MOISTURE_MIN = 0;
  private readonly _SOIL_MOISTURE_MAX = 100;
  private readonly _AIR_TEMPERATURE_MIN = 0;
  private readonly _AIR_TEMPERATURE_MAX = 40;
  private readonly _LIGHT_LUMINOSITY_MIN = 0;
  private readonly _LIGHT_LUMINOSITY_MAX = 100;
  private readonly _CHLOROPHYLL_CONTENT_MIN = 0;
  private readonly _CHLOROPHYLL_CONTENT_MAX = 100;

  private _airHumidity: (number | null)[] = [];
  private _soilMoisture: (number | null)[] = [];
  private _airTemperature: (number | null)[] = [];
  private _lightLuminosity: (number | null)[] = [];
  private _chlorophyllContent: (number | null)[] = [];

  constructor(readonly deviceNumber: string, readonly timeout: number) {}

  /**
   * Draws random values from the given range imitating the data generated by the real seansor
   * @param min - Lower bound of the range
   * @param max - Upper bound of the range
   * @returns {number|null} - Based on probibility of drawing null function return drawn value or null
   */
  private _drawValue(min: number, max: number): number | null {
    let ifNull = Math.random();
    if (ifNull < this._NULL_PROBABILITY) {
      return null;
    } else {
      return Math.floor(Math.random() * (max - min) + min);
    }
  }

  /**
   * Creates object representing one sensor reading
   * @returns {Reading}
   */
  private _getValues(): Reading {
    return {
      deviceNumber: this.deviceNumber,
      airHumidity: this._airHumidity[this._airHumidity.length - 1],
      soilMoisture: this._soilMoisture[this._airHumidity.length - 1],
      airTemperature: this._airTemperature[this._airHumidity.length - 1],
      lightLuminosity: this._lightLuminosity[this._airHumidity.length - 1],
      chlorophyllContent:
        this._chlorophyllContent[this._airHumidity.length - 1],
    };
  }

  /**
   * Draws and pushes into the variables values representing each of elements in sensor reading
   * @returns {void}
   */
  private _pushValues(): void {
    this._lightLuminosity.push(
      this._drawValue(this._LIGHT_LUMINOSITY_MAX, this._LIGHT_LUMINOSITY_MIN)
    );
    this._airTemperature.push(
      this._drawValue(this._AIR_TEMPERATURE_MAX, this._AIR_TEMPERATURE_MIN)
    );
    this._airHumidity.push(
      this._drawValue(this._AIR_HUMIDITY_MAX, this._AIR_HUMIDITY_MIN)
    );
    this._soilMoisture.push(
      this._drawValue(this._SOIL_MOISTURE_MAX, this._SOIL_MOISTURE_MIN)
    );
    this._chlorophyllContent.push(
      this._drawValue(
        this._CHLOROPHYLL_CONTENT_MAX,
        this._CHLOROPHYLL_CONTENT_MIN
      )
    );
  }

  simulate = (onCreate: (reading: Reading) => void): void => {
    this._pushValues();
    onCreate && onCreate(this._getValues());
    setTimeout(() => this.simulate(onCreate), this.timeout);
  };
}

export default Simulator;
